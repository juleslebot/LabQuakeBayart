doerler_to_python_func.py
> Converts Doerler files format into readable files

Evaluation_Epsilon(Fn).py
> Is used to plot \varepsilon_{yy} as a function of the normal force
> Allows to check the defects of the blocks

FourrierPosition.py
> Used to make a fourier analysis of the position of the grains seen with the camera.
> Allows to see global movement and have a noise estimation

full_epsilon.py
> Library used to plot \varepsilon_{xx,yy,xy} in function of all variables.
> Called by *LEFM*

Image_Rename.py
> Renames the images of a frame by frame acquisition to be able to sort them alphanumerically

importAgilentBin.py
> Library used to import oscilloscopes data from the .bin format.

LEFM_fit.py
> Automated fitting tool allowing to fit the data with the LEFM solution.

LEFM_slider.py
> Automated fitting tool allowing to fit the data with the LEFM solution.
> Plots the LEFM solution and allows to modify the fitting parameters with sliders

Live_Plot.py
> Plot the NI daq data in live and save it.

Mass_Dealing_scopes.py
> Extract information from the oscilloscopes raw data when there are numerous acquisition.

Nice_Plots.py
> The code of some plots I made for my internship.

Oscillo_USB.py
> Read and analyse data from the oscilloscopes directly.

Oscillo_USB_Strain_Gage.py
> Read and analyse data from the oscilloscopes directly.
> Specifically for strain gages data, as it converts them into u_xx, u_yy, u_xy

Plot_listAllCircles.py
> Plots the data acquired from the matlab tracking software.

plot_oscillo_simple.py
> Quick and dirty way to plot the data acquired from an osciloscope without editing.

Python_DAQ.py
> Generalistic library containing various sort of function I have been using.

Rotimage.py
> Just a simple tool to rotate images.

savetotxt.py
> Export data to txt files for Elsa.

Simulation_LEFM_Slider.py
> Simulate the LEFM solution and plot it, with sliders to play on the different parameters.

Simulation_LEFM_angle_Slider.py
> Simulate the LEFM solution and plot it, with sliders to play on the different parameters.
> Added the thickness of the interface and the inclination of the rupture front.


speed_eval.py
> Quick and dirty way to evaluate the speed of a rupture.

suivi_particules.py
> Python way of tracking the movement of the grains in a phantom video.

TEST_U_to_Uxy_Delay.py
> Convert U1,2,3 data into Uxx,yy,xy data.
> Adding a delay between the three components.
> Still in developpement.

time_evaluation.py
> Evaluation of the propagation timings during a rupture.

tmp.py
> temporary fil for testing purposes.

tracking.py
>

txt_to_python.py
>

U123_to_Uxy.py
> Convert U1,2,3 data into Uxx,yy,xy data.

zaber.py
>  Control Zaber using Python.


